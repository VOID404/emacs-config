#+BEGIN_SRC emacs-lisp
  (general-auto-unbind-keys)
#+END_SRC
  
* UI
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)

  (use-package doom-modeline
    :init
    (setq-default battery-mode-line-format "[%b%p%%  %t] ")
    (setq-default display-time-default-load-average nil)
    (setq-default display-time-format "%H:%M")
    :config
    (display-battery-mode)
    (display-time-mode)
    (doom-modeline-mode 1))

  (use-package centaur-tabs
    :config
    (centaur-tabs-mode t)
    (setq centaur-tabs-set-bar 'under)
    (setq x-underline-at-descent-line t)
    (setq centaur-tabs-style "wave")
    :bind
    ("C-c <left>" . centaur-tabs-backward)
    ("C-c <right>" . centaur-tabs-forward))

  (use-package base16-theme)

  (use-package cyberpunk-theme)

  (add-to-list 'custom-theme-load-path "~/.config/emacs/themes/dracula-pro")
  (load-theme 'dracula-pro-vanhelsing t)
#+END_SRC

* Behaviour
#+BEGIN_SRC emacs-lisp
  (show-paren-mode)
  (electric-pair-mode)
  (set-input-method 'polish-slash)

  (use-package which-key
    :config
    (which-key-mode 1))

  (use-package origami
    :config
    (global-origami-mode))

  '(elpaca vimish-fold
    (require 'vimish-fold)
    (vimish-fold-global-mode 1))

  (use-package helpful)

  (use-package consult)

  (use-package vertico
    :config
    (vertico-mode 1))

  (use-package marginalia
    :config
    (marginalia-mode))

  (use-package orderless
    :init
    (setq completion-styles '(orderless)))

  (use-package projectile
    :config
    (projectile-mode 1)
    (add-to-list 'projectile-project-root-files-bottom-up "go.mod"))

  (use-package workgroups2
    :config
    (workgroups-mode 1))
#+END_SRC

* Tools
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (defalias 'magit-diff-visit-file 'magit-diff-visit-file-other-window))

  (use-package treemacs
    :config
    (treemacs-follow-mode t))

  (use-package treemacs-projectile)

  (use-package treemacs-magit)

  (use-package yasnippet-snippets
    :config
    (yas-global-mode))
#+END_SRC

#+RESULTS:

* Languages
#+BEGIN_SRC emacs-lisp
  (use-package tree-sitter-langs)

  (use-package tree-sitter-ess-r
    :init
    (add-hook 'ess-r-mode-hook 'tree-sitter-ess-r-using-r-faces))

  (use-package treesit-auto
    :config
    (global-treesit-auto-mode)
    (dolist (m '(("\\.go$" . go-ts-mode)
    	       ("/go.mod$" . go-mod-ts-mode)
    	       ("\\.ya?ml$" . yaml-ts-mode)
    	       ("/Dockerfile" . dockerfile-ts-mode)
    	       ("\\.rs$" . rust-ts-mode)))
      (add-to-list 'auto-mode-alist m)))

  '(defun void/eglot-before-save ()
     (message "[void] Formatting buffer")
     (eglot-format-buffer))

  '(defun void/setup-eglot (server)
     (message "[void] Setting up eglot rust lsp")
     (add-to-list 'eglot-server-programs '(rust-ts-mode . ("rust-analyzer")))
     (message "[void] Setting up eglot before save")
     (add-hook 'before-save-hook 'void/eglot-before-save))

  (defun void/setup-lsp ()
    (add-hook 'before-save-hook (lambda () (lsp-format-buffer))))

  (use-package lsp-mode
    :init
    ;; (setq lsp-keymap-prefix "SPC c")
    (dolist (m '(go-ts-mode-hook
    	       dockerfile-ts-mode-hook
    	       rust-ts-mode-hook
    	       c-ts-mode-hook
    	       haskell-mode-hook)) 
      (add-hook m 'lsp-deferred))
    :config
    (general-def 'normal lsp-mode :definer 'minor-mode
      "SPC c" lsp-command-map)
    :hook (lsp-mode . void/setup-lsp))

  (use-package lsp-ui)

  (use-package flycheck-rust
    :init
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

  ;; Enable completion on tab
  (setq tab-always-indent 'complete)

  ;; In-buffer completion window
  (use-package corfu
    :elpaca (corfu :files (:defaults "extensions/*"))
    :config
    (require 'corfu-popupinfo)

    (global-corfu-mode)
    (setq corfu-cycle t)
    (setq corfu-auto t)

    (setq corfu-popupinfo-delay '(1.0 . 0.5))
    (add-hook 'corfu-mode-hook 'corfu-popupinfo-mode))

  (use-package flycheck
    :config
    (global-flycheck-mode))

  (use-package markdown-mode)

  (use-package parinfer-rust-mode
    :init
    (add-hook 'elisp-mode-hook 'parinfer-rust-mode))

  (use-package ledger-mode
    :init
    (add-to-list 'auto-mode-alist '("/.hledger.journal$" . ledger-mode)))

  (use-package lsp-haskell)

  (use-package haskell-mode
    :config
    (custom-set-variables '(haskell-process-type 'stack-ghci))
    (add-to-list 'auto-mode-alist '("\\.hs$" . haskell-mode)))

  (use-package shakespeare-mode
    :mode (("\\.hamlet\\'" . shakespeare-hamlet-mode)
  	 ("\\.lucius\\'" . shakespeare-lucius-mode)
  	 ("\\.julius\\'" . shakespeare-julius-mode)))

  (use-package graphql-mode
    :mode "\\.g(raph)?ql")

  (use-package restclient
    :mode "\\.http\\'")
#+END_SRC

* Org
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :init
    (setq org-roam-directory "~/org/roam"))

  (use-package engrave-faces)


  (setq org-todo-keywords '((sequence "[_](t!)"
  				    "[?](f!)"
  				    "[VERIFY](v!)"
  				    "[WAIT](w@/!)"
  				    "|" "[X](d!)" "[CANCELED](c!)" "[NMP](n@)"))
        org-todo-keyword-faces '(("[_]" . (:foreground "green"))
  			       ("[?]" . warning)
  			       ("[X]" . (:foreground "green"))
  			       ("[CANCELED]" . (:strike-through t :foreground "red"))))

  (setq org-default-notes-file "~/org/notes.org")
  (setq org-capture-templates
  	'(("t" "Todo" entry (file+headline "~/org/todo.org" "Inbox")
  	   "* TODO %?\n  %i")
  	  ("n" "Note" entry (file+headline "~/org/todo.org" "Inbox")
  	   "* %?\n  %i")))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)))

  (advice-add 'org-local-logging :override
  	      (lambda (value)
  		"Get logging settings from a property VALUE."
  		(let ((custom-split (lambda (string)
  				      (let* ((rexp "\"\\(.+?\\)\"\\|\\S-+")
  					     (start 0)
  					     (list nil))

  					(while (and (< start (length string))
  						    (string-match rexp string start)
  						    (>= (length string) (match-end 0)))
  					  (setq start (1+ (match-end 0)))
  					  (let* ((group (if (match-beginning 1) 1 0))
  						 (end (min (match-end group) (length string)))
  						 (this (substring string (match-beginning group) end)))
  					    (push this list)))
  					(nreverse list)))))
  		  ;; Directly set the variables, they are already local.
  		  (setq org-log-done nil
  			org-log-repeat nil
  			org-todo-log-states nil)
  		  (dolist (w (funcall custom-split value))
  		    (let (a)
  		      (cond
  		       ((setq a (assoc w org-startup-options))
  			(and (member (nth 1 a) '(org-log-done org-log-repeat))
  			     (set (nth 1 a) (nth 2 a))))
  		       ((setq a (org-extract-log-state-settings w))
  			(and (member (car a) org-todo-keywords-1)
  			     (push a org-todo-log-states)))))))))


  (setq void/org-latex-scale 1.3)

  (setq org-format-latex-options (plist-put org-format-latex-options :scale void/org-latex-scale))
  (defun my/text-scale-adjust-latex-previews ()
    "Adjust the size of latex preview fragments when changing the
  buffer's text scale."
    (pcase major-mode
      ('latex-mode
       (dolist (ov (overlays-in (point-min) (point-max)))
  	 (if (eq (overlay-get ov 'category)
  		 'preview-overlay)
  	     (my/text-scale--resize-fragment ov))))
      ('org-mode
       (dolist (ov (overlays-in (point-min) (point-max)))
  	 (if (eq (overlay-get ov 'org-overlay-type)
  		 'org-latex-overlay)
  	     (my/text-scale--resize-fragment ov))))))

  (defun my/text-scale--resize-fragment (ov)
    (overlay-put
     ov 'display
     (cons 'image
  	   (plist-put
  	    (cdr (overlay-get ov 'display))
  	    :scale (+ void/org-latex-scale (* 0.25 text-scale-mode-amount))))))

  (add-hook 'text-scale-mode-hook #'my/text-scale-adjust-latex-previews)
  (setq org-latex-create-formula-image-program 'dvisvgm)
  (setq org-src-window-setup 'split-window-below)
#+END_SRC

* Keybindings
#+BEGIN_SRC emacs-lisp
  (defun void/ripgrep ()
    "Search with `rg` current project (or current dir)"
    (interactive)
    (consult-ripgrep (projectile-project-root) nil))

  (defun void/dotfile ()
    "Open emacs settings file"
    (interactive)
    (find-file (expand-file-name "settings.org" user-emacs-directory)))

  (defun void/reload ()
    "Reload emacs config"
    (interactive)
    (load (expand-file-name "init.el" user-emacs-directory)))

  (defun void/org-open ()
    "Open an org note"
    (interactive)
    (ido-find-file-in-dir "~/org"))

  (general-define-key
   :states '(normal visual insert emacs motion)
   :prefix "SPC"
   :non-normal-prefix "M-SPC"

   "SPC" 'consult-buffer
   "/" 'void/ripgrep

   "f" '(:ignore t :which-key "files")
   "f f" 'find-file
   "f p" 'projectile-find-file
   "f d" 'void/dotfile

   "p" '(:ignore t :which-key "projects")
   "p p" 'projectile-switch-project
   "p a" 'projectile-add-known-project
   "p d" 'projectile-remove-known-project

   ;; "c a" 'eglot-code-actions
   ;; "c r" 'eglot-rename
   ;; "c d" 'xref-find-definitions
   ;; "c D" 'xref-find-references

   "g" '(:ignore t :which-key "git")
   "g g" 'magit
   "g b" 'magit-blame
   "g c" 'magit-checkout

   "b" '(:ignore t :which-key "buffer")
   "b r" 'revert-buffer-quick
   "b d" 'kill-current-buffer
   "b b" 'consult-buffer

   "r d" 'void/reload

   "n f" 'void/org-open
   "n n" 'org-capture
   "n t" 'org-todo-list

   "n r f" 'org-roam-node-find
   "n r F" 'org-roam-ref-find
   "n r s" 'org-roam-db-sync
   "n r g" 'org-roam-graph

   "o p" 'treemacs

   "w =" 'balance-windows)

  (general-define-key
   "C-s" 'consult-line)
  (general-auto-unbind-keys t)
#+END_SRC
