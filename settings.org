* UI
#+BEGIN_SRC emacs-lisp
  (elpaca all-the-icons
    (require 'all-the-icons))

  (elpaca doom-modeline
    (require 'doom-modeline)
    (setq-default battery-mode-line-format "[%b%p%%  %t] ")
    (setq-default display-time-default-load-average nil)
    (setq-default display-time-format "%H:%M")

    (display-battery-mode)
    (display-time-mode)
    (doom-modeline-mode 1))

  (elpaca dracula-theme
     (require 'dracula-theme))

  (elpaca base16-theme
    (require 'base16-theme))

  (elpaca cyberpunk-theme
    (require 'cyberpunk-theme)
    (load-theme 'cyberpunk t))
#+END_SRC

* Behaviour
#+BEGIN_SRC emacs-lisp
  (show-paren-mode)
  (electric-pair-mode)

  (elpaca which-key
    (require 'which-key)
    (which-key-mode 1))

  (elpaca vimish-fold
    (require 'vimish-fold)
    (vimish-fold-global-mode 1))

  (elpaca helpful
    (require 'helpful))

  (elpaca consult
    (require 'consult))

  (elpaca vertico
    (require 'vertico)
    (vertico-mode 1))

  (elpaca marginalia
    (require 'marginalia)
    (marginalia-mode))

  (elpaca orderless
    (require 'orderless)
    (setq completion-styles '(orderless)))

  (elpaca projectile
    (require 'projectile)
    (projectile-mode 1)
    (add-to-list 'projectile-project-root-files-bottom-up "go.mod"))
#+END_SRC

* Tools
#+BEGIN_SRC emacs-lisp
  (elpaca magit
    (require 'magit)
    (defalias 'magit-diff-visit-file 'magit-diff-visit-file-other-window)
    (transient-append-suffix 'magit-log '(0 -1) '(3 "=p" "First parent" "--first-parent")))

  (elpaca treemacs
    (require 'treemacs)
    (treemacs-follow-mode t))

  (elpaca treemacs-projectile
    (require 'treemacs-projectile))

  (elpaca treemacs-magit
    (require 'treemacs-magit))

#+END_SRC

* Languages
#+BEGIN_SRC emacs-lisp
  (elpaca treesit-auto
    (require 'treesit-auto)
    (global-treesit-auto-mode)
    (dolist (m '(("\\.go$" . go-ts-mode)
		 ("/go.mod$" . go-mod-ts-mode)
		 ("\\.ya?ml$" . yaml-ts-mode)))
      (add-to-list 'auto-mode-alist m)))

  (elpaca nil
    (dolist (m '(go-ts-mode-hook))
      (add-hook m 'eglot-ensure)))

  ;; Enable completion on tab
  (setq tab-always-indent 'complete)

  ;; In-buffer completion window
  (elpaca corfu
    (require 'corfu)
    (global-corfu-mode)
    (setq corfu-cycle t)
    (setq corfu-auto t))

  (elpaca flycheck
    (require 'flycheck)
    (global-flycheck-mode))
#+END_SRC

* Keybindings
#+BEGIN_SRC emacs-lisp
  (defun void/ripgrep ()
    "Search with `rg` current project (or current dir)"
    (interactive)
    (consult-ripgrep (projectile-project-root) nil))

  (defun void/dotfile ()
    "Open emacs settings file"
    (interactive)
    (find-file (expand-file-name "settings.org" user-emacs-directory)))

  (defun void/reload ()
    "Reload emacs config"
    (interactive)
    (load (expand-file-name "init.el" user-emacs-directory)))

  (general-define-key
   :prefix "C-c"

   "SPC" 'consult-buffer
   "/" 'void/ripgrep

   "f f" 'find-file
   "f p" 'projectile-find-file
   "f d" 'void/dotfile

   "p p" 'projectile-switch-project
   "p a" 'projectile-add-known-project
   "p d" 'projectile-remove-known-project

   "c r" 'eglot-rename
   "c d" 'xref-find-definitions
   "c D" 'xref-find-references

   "g g" 'magit-status
   "g b" 'magit-blame
   "g c" 'magit-checkout

   "r d" 'void/reload

   "o t" 'treemacs)

  (general-define-key
   "C-s" 'consult-line)
#+END_SRC
