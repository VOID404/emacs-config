* UI
** All the icons
   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons
       :straight t
       :if (display-graphic-p))
   #+END_SRC

** Modeline
   #+BEGIN_SRC emacs-lisp
     (use-package doom-modeline
       :straight t
       :init
       (setq-default battery-mode-line-format "[%b%p%%  %t] ")
       (setq-default display-time-default-load-average nil)
       (setq-default display-time-format "%H:%M")
       :config
       (display-battery-mode)
       (display-time-mode)
       (doom-modeline-mode 1))
   #+END_SRC

** Which key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :straight t
       :config
       (which-key-mode 1))
   #+END_SRC

** Themes
   #+BEGIN_SRC emacs-lisp
     (use-package dracula-theme
       :straight t
       :defer t)

     (use-package base16-theme
       :straight t
       :defer t)

     (use-package cyberpunk-theme
       :straight t
       :defer t)

     (load-theme 'cyberpunk t)
   #+END_SRC
** Tabs
#+BEGIN_SRC emacs-lisp
  (use-package centaur-tabs
    :straight t)
#+END_SRC
* Utils
** General
#+BEGIN_SRC emacs-lisp
  (use-package general
    :straight t)

  (general-define-key
   :prefix "C-c"
   "SPC" 'ivy-switch-buffer)
#+END_SRC
** XCLIP
#+BEGIN_SRC emacs-lisp
  (use-package xclip
    :straight t
    :config
    (xclip-mode 1))
#+END_SRC
** Vimish fold
#+BEGIN_SRC emacs-lisp
    (use-package vimish-fold
      :straight t
      :bind (("C-c z f" . vimish-fold)
	     ("C-c z d" . vimish-fold-delete)
	     ("C-c z a" . vimish-fold-toggle))
      :config
      (vimish-fold-global-mode 1))
#+END_SRC
** Treemacs
   #+BEGIN_SRC emacs-lisp
     (use-package treemacs
       :straight t
       :config
       (treemacs-follow-mode t)
       :bind ("C-c o t" . treemacs))

     (use-package treemacs-projectile
       :straight t
       :after (treemacs projectile))

     (use-package treemacs-magit
       :straight t
       :after (treemacs magit))

     (use-package lsp-treemacs
       :straight t
       :after (treemacs lsp))
   #+END_SRC

** Hydra
   #+BEGIN_SRC emacs-lisp
     (use-package hydra
       :straight t)
     (use-package pretty-hydra
       :straight t)
     (use-package major-mode-hydra
       :straight t
       :defer nil
       :bind
       ("M-SPC" . major-mode-hydra))
   #+END_SRC

** Auto Brackets
   #+BEGIN_SRC emacs-lisp
     (show-paren-mode)
     (electric-pair-mode)
   #+END_SRC

** Projectile
   #+BEGIN_SRC emacs-lisp
     (use-package ripgrep
       :straight t)
     (use-package projectile
       :straight t
       :config
       (projectile-mode 1)
       (add-to-list 'projectile-project-root-files-bottom-up "go.mod")
       :general (:keymap 'projectile-mode-map
		 :prefix "C-c p"
		 "p" 'projectile-switch-project
		 "a" 'projectile-add-known-project
		 "d" 'projectile-remove-known-project
		 "/" 'counsel-projectile-rg)
       :general (:keymap 'projectile-mode-map
		 "C-c f p" 'projectile-find-file))

     (use-package counsel-projectile
       :straight t
       :after (counsel projectile)
       :config
       (counsel-projectile-mode 1))
   #+END_SRC

** Transpose frame
   #+BEGIN_SRC emacs-lisp
     (use-package transpose-frame
       :straight t
       :pretty-hydra
       ((:color red :quit-key "q")
	("Transpose"
	 (("h" flop-frame "horizontal")
	  ("v" flip-frame "vertical")
	  ("r" rotate-frame-clockwise "rotate 90")
	  ("R" rotate-frame-clockwise "rotate 180"))))
       :bind ("C-c t" . transpose-frame-hydra/body))
   #+END_SRC

** Ivy
   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :straight t
       :config
       (ivy-mode 1))

     (use-package all-the-icons-ivy
       :straight t
       :after (ivy all-the-icons)
       :config
       (all-the-icons-ivy-setup))

     (use-package counsel
       :straight t
       :after ivy
       :defer nil
       :bind (("M-x" . counsel-M-x)
	      ("C-s" . swiper-isearch)
	      ("C-x C-f" . counsel-find-file)
	      ("C-x M-f" . counsel-project-file-jump)
	      ("C-x d" . counsel-dired)
	      ("C-c w" . hydra-window/body)))

     (use-package ace-window
       :straight t)

     (defun counsel-project-file-jump ()
       (interactive)
       (counsel-file-jump nil (projectile-project-p)))

     (pretty-hydra-define hydra-window
       (:color amaranth :quit-key "q")
       ("Buffer"
	(("," previous-buffer "previous")
	 ("." next-buffer "next")
	 ("bb" counsel-ibuffer "jump buffer")
	 ("c" crux-create-scratch-buffer "scratch")
	 ("k" kill-current-buffer "kill"))
	"Window"
	(("ww" ace-window "switch")
	 ("s" ace-swap-window "swap")
	 ("v" split-window-below "split below")
	 ("h" split-window-right "wplit right")
	 ("wk" delete-window "kill")
	 ("f" delete-other-windows "fullscreen"))))
   #+END_SRC
   
** Magit
   #+BEGIN_SRC emacs-lisp
		    (use-package magit
		      :straight t
		      :config
		      (defalias 'magit-diff-visit-file 'magit-diff-visit-file-other-window)
		      :pretty-hydra
		      ((:color teal :quit-key "q")
		       ("View"
			(("s" magit-status "status")
			 ("l" magit-log-all-branches "log")
			 ("b" magit-blame "blame"))
			"Do"
			(("p" magit-push "push")
			 ("z" magit-stash "stash"))))
		      :bind (("C-c g h" . magit-hydra/body)
			     ("C-c g g" . magit-status)
			     ("C-c g b" . magit-checkout)
			     ("C-c g c" . magit-commit)))
   #+END_SRC

** Crux
   #+BEGIN_SRC emacs-lisp
     (use-package crux
       :straight t
       :bind (("C-k" . crux-smart-kill-line)
	      ("C-a" . crux-move-beginning-of-line)))
   #+END_SRC
   
** Helpful
   #+BEGIN_SRC emacs-lisp
     (use-package helpful
       :straight t)
   #+END_SRC

* Language Support
** Flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :straight t
       :init (global-flycheck-mode))
   #+END_SRC
** Treesit
#+BEGIN_SRC emacs-lisp
  (use-package company
    :straight t
    :config
    (global-company-mode))

  (use-package treesit-auto
    :straight t
    :config
    (global-treesit-auto-mode))

  (dolist (v '(("\\.go$" . go-ts-mode)
	       ("/go.mod$" . go-mod-ts-mode)))
    (add-to-list 'auto-mode-alist v))

  (dolist (m '(go-ts-mode-hook))
    (add-hook m 'eglot-ensure))


  (general-define-key
   :keymaps 'eglot-mode-map
   :prefix "C-c c"
   "r" 'eglot-rename
   "d" 'xref-find-definitions
   "o d" 'xref-find-definitions-other-window
   "D" 'xref-find-references)
#+END_SRC
