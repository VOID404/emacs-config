* Build-in options
** UI
*** Font
    #+BEGIN_SRC emacs-lisp
     (set-face-attribute 'default nil :height 120)
     (set-face-font 'default "Input")
    #+END_SRC
*** Initial scratch 
    #+BEGIN_SRC emacs-lisp
     (setq initial-scratch-message "")
    #+END_SRC
*** Borderless
    #+BEGIN_SRC emacs-lisp
     (scroll-bar-mode 0)
     (tool-bar-mode 0)
     (menu-bar-mode 0)
    #+END_SRC
* Packages
*** Org mode
    #+BEGIN_SRC emacs-lisp
  ;; Don't open new windows for src editing
  (setq org-src-window-setup 'current-window)
    #+END_SRC
** Utilities
*** Sudo edit
    #+BEGIN_SRC emacs-lisp
  (straight-use-package 'sudo-edit)
    #+END_SRC
*** Projectile
    #+BEGIN_SRC emacs-lisp
  (straight-use-package 'projectile)
  (projectile-global-mode t)
  (setq projectile-enable-caching t)
    #+END_SRC
*** iflipb - stack based buffer switching
    #+BEGIN_SRC emacs-lisp
  (straight-use-package 'iflipb)
  (defvar iflipb-wrap-around t)
    #+END_SRC
*** Ace jump buffer
    #+BEGIN_SRC emacs-lisp
  (straight-use-package 'ace-jump-buffer)
    #+END_SRC
*** Avy - char based decision tree
    #+BEGIN_SRC emacs-lisp
  (straight-use-package 'avy)
    #+END_SRC
*** Ace window
    #+BEGIN_SRC emacs-lisp
  (straight-use-package 'ace-window)
    #+END_SRC
*** Magit
    #+BEGIN_SRC emacs-lisp
  (straight-use-package 'magit)
  (straight-use-package 'evil-magit)
  (require 'evil-magit)
    #+END_SRC
*** Auto Brackets
    #+BEGIN_SRC emacs-lisp
  (straight-use-package 'autopair)
  (autopair-global-mode)
    #+END_SRC
** Language support
*** Auto completion
    #+BEGIN_SRC emacs-lisp
      (straight-use-package 'company)
      (require 'company)
      (add-hook 'after-init-hook 'global-company-mode)
    #+END_SRC
*** REST client
    #+BEGIN_SRC emacs-lisp
  (straight-use-package 'restclient)
  (straight-use-package 'company-restclient)
  (add-to-list 'company-backends 'company-restclient)

  (straight-use-package 'ob-restclient)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((restclient . t)))


  (add-to-list 'auto-mode-alist '("\\.http\\'" . restclient-mode))
    #+END_SRC
*** Dockerfile
    #+BEGIN_SRC emacs-lisp
  (straight-use-package 'dockerfile-mode)
    #+END_SRC
*** JSX
    #+BEGIN_SRC emacs-lisp
  (straight-use-package 'rjsx-mode)
  (add-to-list 'auto-mode-alist '("components\\/.*\\.js\\'" . rjsx-mode))
  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . rjsx-mode))
  (add-to-list 'auto-mode-alist '("App\\.jsx?\\'" . rjsx-mode))
    #+END_SRC
*** Scala
    #+BEGIN_SRC emacs-lisp
  (straight-use-package 'ensime)
  (setq ensime-startup-notification nil)
    #+END_SRC
*** Docker
    #+BEGIN_SRC emacs-lisp
      (straight-use-package 'yaml-mode)
      (straight-use-package 'docker)
      (straight-use-package 'dockerfile-mode)
      (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
    #+END_SRC
*** Scheme
    #+BEGIN_SRC emacs-lisp
      (setq geiser-mode-smart-tab-p t)
      (setq geiser-active-implementations '(chez))
      (straight-use-package 'geiser)

    #+END_SRC
*** Golang
    #+BEGIN_SRC emacs-lisp
      ;;; (straight-use-package 'go-mode)

      (straight-use-package
       '(el-patch :type git :host github :repo "dominikh/go-mode.el"))
      (straight-use-package 'go-eldoc)
      (straight-use-package 'company-go)
      (require 'go-eldoc)
      (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))

      (add-hook 'go-mode-hook 'go-eldoc-setup)
      (add-hook 'go-mode-hook 
		'(lambda ()
		   (setq gofmt-command "goimports")
		   (add-hook 'before-save-hook 'gofmt-before-save)
		   (set (make-local-variable 'company-backends)
			'((company-dabbrev-code company-go)))))
      #+END_SRC
*** Rust
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'rust-mode)

  (setq rust-format-on-save t)
  (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))
#+END_SRC
*** Arduino
    #+BEGIN_SRC emacs-lisp
  (straight-use-package 'arduino-mode)
    #+END_SRC
*** Flycheck
    #+BEGIN_SRC emacs-lisp
  (straight-use-package 'flycheck)
  (global-flycheck-mode)
    #+END_SRC
*** Ivy
    #+BEGIN_SRC emacs-lisp
      (straight-use-package 'ivy)
      (straight-use-package 'swiper)
      (straight-use-package 'counsel)
      (straight-use-package 'counsel-projectile)
      (counsel-mode 1)
      (setq ivy-extra-directories nil)
    #+END_SRC
** Global Behaviour
*** Evil
    #+BEGIN_SRC emacs-lisp
  (straight-use-package 'evil)
  (evil-mode 1)
    #+END_SRC
** UI
*** Modeline
    #+BEGIN_SRC emacs-lisp
      (straight-use-package 'spaceline)
      (straight-use-package 'winum)
      (require 'spaceline-config)
      (spaceline-emacs-theme)
      (setq winum-auto-setup-mode-line nil)
      (winum-mode)
    #+END_SRC
*** Neotree
    #+BEGIN_SRC emacs-lisp
      (straight-use-package 'neotree)
      (straight-use-package 'all-the-icons)

      (setq neo-theme 'asci)

      (defun toggle-neotree ()
	(interactive)
	(if (eq major-mode 'neotree-mode) 
	    (windmove-right) 
	  (neotree-show)))

      (defun neotree-project-dir ()
	"Open NeoTree using the git root."
	(interactive)
	(let ((project-dir (projectile-project-root))
	      (file-name (buffer-file-name)))
	  (neotree-toggle)
	  (if project-dir
	      (if (neo-global--window-exists-p)
		  (progn
		    (neotree-dir project-dir)
		    (neotree-find file-name)))
	    (message "Could not find git project root."))))

      ;;; (setq neo-autorefresh t)
      (setq neo-smart-open t)

      (global-set-key (kbd "M-0") 'toggle-neotree)

      (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
      (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
      (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
      (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
      (evil-define-key 'normal neotree-mode-map (kbd "g") 'neotree-refresh)
      (evil-define-key 'normal neotree-mode-map (kbd "n") 'neotree-next-line)
      (evil-define-key 'normal neotree-mode-map (kbd "p") 'neotree-previous-line)
      (evil-define-key 'normal neotree-mode-map (kbd "A") 'neotree-stretch-toggle)
      (evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-hidden-file-toggle)
      (evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-hidden-file-toggle)
      (evil-define-key 'normal neotree-mode-map (kbd "c") 'neotree-create-node)
    #+END_SRC

*** Relative line numbers
    #+BEGIN_SRC emacs-lisp
  (straight-use-package 'linum-relative)
  (linum-relative-global-mode)
  (defvar linum-relative-current-symbol)
  (setq linum-relative-current-symbol "")
    #+END_SRC
*** Which key
    #+BEGIN_SRC emacs-lisp
  (straight-use-package 'which-key)
  (which-key-mode 1)
    #+END_SRC
*** Minimap
    #+BEGIN_SRC emacs-lisp
  (straight-use-package 'minimap)
  (defvar minimap-window-location)
  (setq minimap-window-location 'right)
    #+END_SRC
*** Themes
    #+BEGIN_SRC emacs-lisp
      (straight-use-package 'dracula-theme)
      (straight-use-package 'base16-theme)
      (straight-use-package 'cyberpunk-theme)
      ;; (load-theme 'base16-atelier-forest t)
      (load-theme 'cyberpunk t)
    #+END_SRC

    #+RESULTS:
    : t

* Scripts
*** Codeblock function
    #+BEGIN_SRC emacs-lisp
   (defun lisp-block ()
     "Insert 'org-mode' emacs lisp block."
     (interactive)
     (insert "#+BEGIN_SRC emacs-lisp\n\n#+END_SRC")
     (forward-line -1)
     (org-edit-special))
    #+END_SRC
*** New Buffer
    #+BEGIN_SRC emacs-lisp
   (defun new-empty-buffer ()
     "Create new empty buffer."
     (interactive)
     (let ((buf (generate-new-buffer "untitled")))
       (switch-to-buffer buf)
       (initial-major-mode)
       (setq buffer-offer-save t)
       buf ))
   (show-paren-mode 1)
    #+END_SRC
*** Reload config
    #+BEGIN_SRC emacs-lisp
   (defun reload-config ()
     "Reloads init.el."
     (interactive)
     (load-file "~/.emacs.d/init.el"))
    #+END_SRC
*** Reformat buffer
    #+BEGIN_SRC emacs-lisp
   (defun reformat ()
     "Reformats whole file with evil."
     (interactive)
     (let ((p (point)))
       (evil-goto-first-line)
       (evil-indent ((point-min) (point-max)))))

    #+END_SRC
*** Kill other buffers
    #+BEGIN_SRC emacs-lisp
  (defun kill-other-buffers ()
    "Kill all buffers but the current one.
  Don't mess with special buffers."
    (interactive)
    (dolist (buffer (buffer-list))
      (unless (or (eql buffer (current-buffer)) (not (buffer-file-name buffer)))
	(kill-buffer buffer))))
    #+END_SRC
* Keybindings
  #+BEGIN_SRC emacs-lisp
    (straight-use-package 'general)
    (general-define-key
     :states '(normal visual insert emacs motion)
     :prefix "SPC"
     :non-normal-prefix "M-SPC"
     "" nil
     "TAB" '(iflipb-next-buffer :which-key "prev buffer")
     "SPC" '(execute-extended-command :which-key "M-x")

     "/" '(comment-line :which-key "comment")

     "f" '(:ignore t :which-key "file")
     "ft" '(neotree-toggle :which-key "toggle neotree")
     "fr" '(neotree-project-dir :which-key "toggle neotree with projectile")
     "fd" '(counsel-git :which-key "find in git dir")
     "ff" '(counsel-find-file :which-key "open")
     "fF" '(counsel-projectile-find-file :which-key "open")
     "fe" '(:ignore t :which-key "emacs")
     "fec" '(reload-config :which-key "reload config")

     "p" '(:ignore t :which-key "project")
     "ps" '(projectile-switch-project :which-key "switch")

     "b" '(:ignore t :which-key "buffer")
     "bb" '(ace-jump-buffer :which-key "choose")
     "be" '(eval-buffer :which-key "eval")
     "bs" '(save-buffer :which-key "save")
     "bk" '(kill-buffer :which-key "kill")
     "bn" '(new-empty-buffer :which-key "new")
     "bK" '(kill-other-buffers :which-key "kill others")

     "t" '(:ignore t :which-key "toggles")
     "tm" '(minimap-mode :which-key "minimap")
     "tf" '(dired-sidebar-toggle-sidebar :which-key "files sidebar")

     "p" '(:ignore t :which-key "project")
     "pf" '(counsel-projectile-find-file :which-key "file")
     "pp" '(counsel-projectile-switch-project :which-key "open")

     "w" '(:ignore t :which-key "window")
     "ww" '(ace-window :which-key "switch")
     "ws" '(ace-swap-window :which-key "swap")
     "wk" '(delete-window :which-key "kill")
     "w/" '(split-window-right :which-key "split right")
     "w-" '(split-window-below :which-key "split below")
     "wf" '(delete-other-windows :which-key "fullscreen")

     "g" '(:ignore t :which-key "git")
     "gs" '(magit-status :which-key "magit"))

    (general-define-key 
     :keymaps 'go-mode-map
     :states '(normal)
     "g" '(:ignore t :which-key "Go to")
     "gd" '(go-guru-definition :which-key "definition")
     "gD" '(go-guru-definition-other-window :which-key "definition (other win)"))
  #+END_SRC
  
