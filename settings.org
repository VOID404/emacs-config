* UI
#+BEGIN_SRC emacs-lisp
  (elpaca all-the-icons
    (require 'all-the-icons))

  (elpaca doom-modeline
    (require 'doom-modeline)
    (setq-default battery-mode-line-format "[%b%p%%  %t] ")
    (setq-default display-time-default-load-average nil)
    (setq-default display-time-format "%H:%M")

    (display-battery-mode)
    (display-time-mode)
    (doom-modeline-mode 1))

  (elpaca dracula-theme
    (require 'dracula-theme))

  (elpaca base16-theme
    (require 'base16-theme))

  (elpaca cyberpunk-theme
    (require 'cyberpunk-theme))

  (add-to-list 'custom-theme-load-path "~/.config/emacs/themes/dracula-pro")
  (load-theme 'dracula-pro-vanhelsing t)
#+END_SRC

* Behaviour
#+BEGIN_SRC emacs-lisp
  (show-paren-mode)
  (electric-pair-mode)

  (elpaca which-key
    (require 'which-key)
    (which-key-mode 1))

  (elpaca origami
    (require 'origami)
    (global-origami-mode))

  '(elpaca vimish-fold
    (require 'vimish-fold)
    (vimish-fold-global-mode 1))

  (elpaca helpful
    (require 'helpful))

  (elpaca consult
    (require 'consult))

  (elpaca vertico
    (require 'vertico)
    (vertico-mode 1))

  (elpaca marginalia
    (require 'marginalia)
    (marginalia-mode))

  (elpaca orderless
    (require 'orderless)
    (setq completion-styles '(orderless)))

  (elpaca projectile
    (require 'projectile)
    (projectile-mode 1)
    (add-to-list 'projectile-project-root-files-bottom-up "go.mod"))
#+END_SRC

* Tools
#+BEGIN_SRC emacs-lisp
  (elpaca magit
    (require 'magit)
    (defalias 'magit-diff-visit-file 'magit-diff-visit-file-other-window)
    (transient-append-suffix 'magit-log '(0 -1) '(3 "=p" "First parent" "--first-parent")))

  (elpaca treemacs
    (require 'treemacs)
    (treemacs-follow-mode t))

  (elpaca treemacs-projectile
    (require 'treemacs-projectile))

  (elpaca treemacs-magit
    (require 'treemacs-magit))

#+END_SRC

* Languages
#+BEGIN_SRC emacs-lisp
  (elpaca treesit-auto
    (require 'treesit-auto)
    (global-treesit-auto-mode)
    (dolist (m '(("\\.go$" . go-ts-mode)
		 ("/go.mod$" . go-mod-ts-mode)
		 ("\\.ya?ml$" . yaml-ts-mode)
		 ("/Dockerfile" . dockerfile-ts-mode)))
      (add-to-list 'auto-mode-alist m)))

  (elpaca nil
    (dolist (m '(go-ts-mode-hook dockerfile-ts-mode))
      (add-hook m 'eglot-ensure)))

  ;; Enable completion on tab
  (setq tab-always-indent 'complete)

  ;; In-buffer completion window
  (elpaca (corfu :files (:defaults "extensions/*"))
    (require 'corfu)
    (require 'corfu-popupinfo)

    (global-corfu-mode)
    (setq corfu-cycle t)
    (setq corfu-auto t)

    (setq corfu-popupinfo-delay '(1.0 . 0.5))
    (add-hook 'corfu-mode-hook 'corfu-popupinfo-mode))

  (elpaca flycheck
    (require 'flycheck)
    (global-flycheck-mode))

  (elpaca markdown-mode
    (require 'markdown-mode))

  (elpaca parinfer-rust-mode
    (require 'parinfer-rust-mode)
    (add-hook 'elisp-mode-hook 'parinfer-rust-mode))

  (elpaca ledger-mode
    (require 'ledger-mode)
    (add-to-list 'auto-mode-alist '("/.hledger.journal$" . ledger-mode)))
#+END_SRC

* Org
#+BEGIN_SRC emacs-lisp
  (elpaca org-roam
    (require 'org-roam)
    (setq org-roam-directory "~/org/roam"))

  (setq org-default-notes-file "~/org/notes.org")
  (setq org-capture-templates
	'(("t" "Todo" entry (file+headline "~/org/todo.org" "Inbox")
	   "* TODO %?\n  %i")
	  ("n" "Note" entry (file+headline "~/org/todo.org" "Inbox")
	   "* %?\n  %i")))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)))

  (advice-add 'org-local-logging :override
	      (lambda (value)
		"Get logging settings from a property VALUE."
		(let ((custom-split (lambda (string)
				      (let* ((rexp "\"\\(.+?\\)\"\\|\\S-+")
					     (start 0)
					     (list nil))

					(while (and (< start (length string))
						    (string-match rexp string start)
						    (>= (length string) (match-end 0)))
					  (setq start (1+ (match-end 0)))
					  (let* ((group (if (match-beginning 1) 1 0))
						 (end (min (match-end group) (length string)))
						 (this (substring string (match-beginning group) end)))
					    (push this list)))
					(nreverse list)))))
		  ;; Directly set the variables, they are already local.
		  (setq org-log-done nil
			org-log-repeat nil
			org-todo-log-states nil)
		  (dolist (w (funcall custom-split value))
		    (let (a)
		      (cond
		       ((setq a (assoc w org-startup-options))
			(and (member (nth 1 a) '(org-log-done org-log-repeat))
			     (set (nth 1 a) (nth 2 a))))
		       ((setq a (org-extract-log-state-settings w))
			(and (member (car a) org-todo-keywords-1)
			     (push a org-todo-log-states)))))))))


  (setq void/org-latex-scale 1.3)

  (setq org-format-latex-options (plist-put org-format-latex-options :scale void/org-latex-scale))
  (defun my/text-scale-adjust-latex-previews ()
    "Adjust the size of latex preview fragments when changing the
  buffer's text scale."
    (pcase major-mode
      ('latex-mode
       (dolist (ov (overlays-in (point-min) (point-max)))
	 (if (eq (overlay-get ov 'category)
		 'preview-overlay)
	     (my/text-scale--resize-fragment ov))))
      ('org-mode
       (dolist (ov (overlays-in (point-min) (point-max)))
	 (if (eq (overlay-get ov 'org-overlay-type)
		 'org-latex-overlay)
	     (my/text-scale--resize-fragment ov))))))

  (defun my/text-scale--resize-fragment (ov)
    (overlay-put
     ov 'display
     (cons 'image
	   (plist-put
	    (cdr (overlay-get ov 'display))
	    :scale (+ void/org-latex-scale (* 0.25 text-scale-mode-amount))))))

  (add-hook 'text-scale-mode-hook #'my/text-scale-adjust-latex-previews)
  (setq org-latex-create-formula-image-program 'dvisvgm)
  (setq org-src-window-setup 'split-window-below)
#+END_SRC

* Keybindings
#+BEGIN_SRC emacs-lisp
  (defun void/ripgrep ()
    "Search with `rg` current project (or current dir)"
    (interactive)
    (consult-ripgrep (projectile-project-root) nil))

  (defun void/dotfile ()
    "Open emacs settings file"
    (interactive)
    (find-file (expand-file-name "settings.org" user-emacs-directory)))

  (defun void/reload ()
    "Reload emacs config"
    (interactive)
    (load (expand-file-name "init.el" user-emacs-directory)))

  (defun void/org-open ()
    "Open an org note"
    (interactive)
    (ido-find-file-in-dir "~/org"))

  (general-define-key
   :prefix "C-c"

   "SPC" 'consult-buffer
   "/" 'void/ripgrep

   "f f" 'find-file
   "f p" 'projectile-find-file
   "f d" 'void/dotfile

   "p p" 'projectile-switch-project
   "p a" 'projectile-add-known-project
   "p d" 'projectile-remove-known-project

   "c r" 'eglot-rename
   "c d" 'xref-find-definitions
   "c D" 'xref-find-references

   "g g" 'magit-status
   "g b" 'magit-blame
   "g c" 'magit-checkout

   "b r" 'revert-buffer-quick
   "b d" 'kill-current-buffer
   "b b" 'consult-buffer

   "r d" 'void/reload

   "n f" 'void/org-open
   "n n" 'org-capture
   "n t" 'org-todo-list

   "n r f" 'org-roam-node-find
   "n r F" 'org-roam-ref-find
   "n r s" 'org-roam-db-sync
   "n r g" 'org-roam-graph

   "o t" 'treemacs)

  (general-define-key
   "C-s" 'consult-line)
#+END_SRC
