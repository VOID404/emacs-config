* UI
** All the icons
   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons
       :straight t)
   #+END_SRC

** Modeline
   #+BEGIN_SRC emacs-lisp
     (use-package doom-modeline
       :straight t
       :init
       (setq-default battery-mode-line-format "[%b%p%%  %t] ")
       (setq-default display-time-default-load-average nil)
       (setq-default display-time-format "%H:%M")
       :config
       (display-battery-mode)
       (display-time-mode)
       (doom-modeline-mode 1))
   #+END_SRC

** Which key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :straight t
       :config
       (which-key-mode 1))
   #+END_SRC

** Themes
   #+BEGIN_SRC emacs-lisp
     (use-package dracula-theme
       :straight t
       :defer t)

     (use-package base16-theme
       :straight t
       :defer t)

     (use-package cyberpunk-theme
       :straight t
       :defer t)

     (load-theme 'cyberpunk t)
   #+END_SRC

** Neotree
   #+BEGIN_SRC emacs-lisp
     (use-package neotree
       :straight t
       :config
       (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
       (setq neo-autorefresh nil)
       (setq neo-smart-open nil)
       (setq neo-window-fixed-size nil)
       :bind ("C-c f" . neotree-show))
   #+END_SRC

* Utils
** Hydra
   #+BEGIN_SRC emacs-lisp
     (use-package hydra
       :straight t)
     (use-package pretty-hydra
       :straight t)
     (use-package major-mode-hydra
       :straight t
       :defer nil
       :bind
       ("M-SPC" . major-mode-hydra))
   #+END_SRC

** Ranger
   #+BEGIN_SRC emacs-lisp
     (use-package ranger
       :straight t
       :commands ranger
       :bind ("C-c r" . ranger))
   #+END_SRC

** Auto Brackets
   #+BEGIN_SRC emacs-lisp
     (show-paren-mode)
     (use-package autopair
       :straight t
       :config
       (autopair-global-mode))
   #+END_SRC

** Projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :straight t
       :config
       (projectile-mode +1))
   #+END_SRC

** Transpose frame
   #+BEGIN_SRC emacs-lisp
     (use-package transpose-frame
       :straight t
       :pretty-hydra
       ((:color red :quit-key "q")
	("Transpose"
	 (("h" flop-frame "horizontal")
	  ("v" flip-frame "vertical")
	  ("r" rotate-frame-clockwise "rotate 90")
	  ("R" rotate-frame-clockwise "rotate 180"))))
       :bind ("C-c t" . transpose-frame-hydra/body))
   #+END_SRC

** Ivy
   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :straight t
       :config
       (ivy-mode 1))

     (use-package all-the-icons-ivy
       :straight t
       :after (ivy all-the-icons)
       :config
       (all-the-icons-ivy-setup))

     (use-package counsel
       :straight t
       :after ivy
       :defer nil
       :bind (("M-x" . counsel-M-x)
	      ("C-s" . swiper-isearch)
	      ("C-x C-f" . counsel-find-file)
	      ("C-x M-f" . counsel-project-file-jump)
	      ("C-x d" . counsel-dired)
	      ("C-c w" . hydra-window/body)))

     (use-package ace-window
       :straight t)

     (defun counsel-project-file-jump ()
       (interactive)
       (counsel-file-jump nil (projectile-project-p)))

     (pretty-hydra-define hydra-window
       (:color amaranth :quit-key "q")
       ("Buffer"
	(("," previous-buffer "previous")
	 ("." next-buffer "next")
	 ("bb" counsel-ibuffer "jump buffer")
	 ("c" crux-create-scratch-buffer "scratch")
	 ("k" kill-current-buffer "kill"))
	"Window"
	(("ww" ace-window "switch")
	 ("s" ace-swap-window "swap")
	 ("v" split-window-below "split below")
	 ("h" split-window-right "wplit right")
	 ("wk" delete-window "kill")
	 ("f" delete-other-windows "fullscreen"))))
   #+END_SRC

** Magit
   #+BEGIN_SRC emacs-lisp
	  (use-package magit
	    :straight t
	    :config
	    (defalias 'magit-diff-visit-file 'magit-diff-visit-file-other-window)
	    :pretty-hydra
	    ((:color teal :quit-key "q")
	     ("View"
	      (("s" magit-status "status")
	       ("l" magit-log-all-branches "log")
	       ("b" magit-blame "blame"))
	      "Do"
	      (("p" magit-push "push")
	       ("z" magit-stash "stash"))))
	    :bind ("C-c g" . magit-hydra/body))
   #+END_SRC

** Crux
   #+BEGIN_SRC emacs-lisp
     (use-package crux
       :straight t
       :bind (("C-k" . crux-smart-kill-line)
	      ("C-a" . crux-move-beginning-of-line)))
   #+END_SRC

** Helpful
   #+BEGIN_SRC emacs-lisp
     (use-package helpful
       :straight t)
   #+END_SRC

** Multiple Cursors
   #+BEGIN_SRC emacs-lisp
     (use-package multiple-cursors
       :straight t
       :bind ("C-d" . hydra-multiple-cursors/body))

     (defhydra hydra-multiple-cursors (:hint nil)
       "
      Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
     ------------------------------------------------------------------
      [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
      [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
      [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search
      [Click] Cursor at point       [_q_] Quit"
       ("l" mc/edit-lines :exit t)
       ("a" mc/mark-all-like-this :exit t)
       ("n" mc/mark-next-like-this)
       ("N" mc/skip-to-next-like-this)
       ("M-n" mc/unmark-next-like-this)
       ("p" mc/mark-previous-like-this)
       ("P" mc/skip-to-previous-like-this)
       ("M-p" mc/unmark-previous-like-this)
       ("s" mc/mark-all-in-region-regexp :exit t)
       ("0" mc/insert-numbers :exit t)
       ("A" mc/insert-letters :exit t)
       ("<mouse-1>" mc/add-cursor-on-click)
       ;; Help with click recognition in this hydra
       ("<down-mouse-1>" ignore)
       ("<drag-mouse-1>" ignore)
       ("q" nil :color blue))
   #+END_SRC

* Language Support
** General completion
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :straight t
       :config
       (global-company-mode))

     (use-package lsp-mode
       :straight t)

     (use-package lsp-ui
       :straight t)
   #+END_SRC

** Flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :straight t
       :init (global-flycheck-mode))
   #+END_SRC

** Go
   #+BEGIN_SRC emacs-lisp
     (use-package go-mode
       :straight t
       :mode "\\.go\\'"
       :hook (go-mode .
		      (lambda ()
			(message "debug")
			(setq gofmt-command "goimports")
			(add-hook 'before-save-hook 'gofmt-before-save)
			(set (make-local-variable 'company-backends)
			     '((company-dabbrev-code company-go)))))
       :config
       (major-mode-hydra-define go-mode
	 (:color pink :quit-key "q")
	 ("Goto"
	  (("gd" godef-jump "definition")
	   ("gD" godef-jump-other-window "definition (other window)"))
	  "Refactor"
	  (("r" go-rename "rename")
	   ("p" go-mvpkg "rename package")))))

     (use-package go-rename
       :straight t
       :after go-mode)

     (use-package go-eldoc
       :straight t
       :after go-mode
       :hook (go-mode . go-eldoc-setup))

     (use-package company-go
       :straight t
       :after go-mode)
   #+END_SRC

** Dockerfile
   #+BEGIN_SRC emacs-lisp
     (use-package dockerfile-mode
       :straight t
       :mode "\\^Dockerfile\\'")
   #+END_SRC

** Yaml
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode
       :straight t
       :mode "\\.ya?ml\\'")
   #+END_SRC

** REST
   #+BEGIN_SRC emacs-lisp
     (when (string-equal system-type "darwin")
       (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))

     (use-package restclient
       :straight t
       :mode ("\\.http\\'" . restclient-mode)
       :mode ("\\.rest\\'" . restclient-mode)
       :config
       (major-mode-hydra-define restclient-mode
	 (:color red :quit-key "q")
	 ("Send"
	  (("s" restclient-http-send-current-stay-in-window "pretty")
	   ("r" restclient-http-send-current-raw "raw")
	   ("f" restclient-http-send-current "send and focus"))
	  "Navigation"
	  (("n" restclient-jump-next "next")
	   ("p" restclient-jump-prev "previous")
	   ("<tab>" restclient-toggle-body-visibility "collapse/expand")
	   ("m" restclient-mark-current "mark current")))))
   #+END_SRC

** React
   #+BEGIN_SRC emacs-lispl
     (use-package rjsx-mode
       :mode "components\\/.*\\.js\\'"
       :straight t)
   #+END_SRC

** Webmode
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :straight t
       :mode "\\.vue\\'")
   #+END_SRC

** Typescript
   #+BEGIN_SRC emacs-lisp
     (use-package tide
       :straight t
       :hook (typescript-mode-hook . setup-tide-mode))

     (defun setup-tide-mode ()
       (interactive)
       (tide-setup)
       (flycheck-mode +1)
       (setq flycheck-check-syntax-automatically '(save mode-enabled))
       (eldoc-mode +1)
       (tide-hl-identifier-mode +1)
       ;; company is an optional dependency. You have to
       ;; install it separately via package-install
       ;; `M-x package-install [ret] company`
       (company-mode +1))
   #+END_SRC

* Scripts
** Codeblock
   #+BEGIN_SRC emacs-lisp
     (defun lisp-block ()
       "Insert 'org-mode' emacs lisp block."
       (interactive)
       (insert "#+BEGIN_SRC emacs-lisp\n\n#+END_SRC\n")
       (indent-buffer)
       (forward-line -2)
       (org-edit-special))
   #+END_SRC

** Indent buffer
   #+BEGIN_SRC emacs-lisp
     (defun indent-buffer ()
       (interactive)
       (save-excursion
	 (mark-whole-buffer)
	 (delete-trailing-whitespace)
	 (indent-region (point-min) (point-max))))

     (global-set-key "\C-x\\" 'indent-buffer)
   #+END_SRC

** Go mvpkg
   #+BEGIN_SRC emacs-lisp
     (defun go-mvpkg ()
       (interactive)
       (let* ((buf nil)
	      (old (gmv/package))
	      (prefix (gmv/pkgpath old))
	      (new (concat prefix "/" (read-string "Rename to: ")))
	      (ok (y-or-n-p (format "Moving %s to %s, is that OK? "
				    (gmv/pkgname old)
				    (gmv/pkgname new))))
	      (command (concat "gomvpkg -from " old " -to " new)))
	 (when ok
	   (message "Calling \"%s\"" command)
	   (in-project
	    (setq buf (shell-command-to-string command)))
	   (gmv/fix-buffers old new)
	   (gmv/fix-all-tests)
	   (pop-to-buffer "*gomvpkg*")
	   (local-set-key (kbd "C-q") 'kill-buffer-and-window)
	   (insert buf))))

     (defmacro in-project (&rest body)
       `(let ((default-directory (projectile-project-root)))
	  ,@body))

     (defun gmv/pkgname (pkg)
       (car (last (split-string pkg "/"))))

     (defun gmv/pkgpath (pkg &optional num)
       (string-join (butlast (split-string pkg "/") (or num 1)) "/"))

     (defun gmv/package ()
       (string-trim (shell-command-to-string "go list")))

     (defun gmv/fix-buffers (old new)
       (let* ((original default-directory)
	      (current (concat (gmv/pkgpath original 2) "/" (gmv/pkgname new) "/")))
	 (dolist (buf (buffer-list))
	   (with-current-buffer buf
	     (when (and (buffer-file-name) (string-prefix-p original (buffer-file-name)))
	       (set-visited-file-name (replace-regexp-in-string original
								current
								(buffer-file-name)))
	       (revert-buffer :ignore-auto :noconfirm))))))

     (defun gmv/fix-all-tests ()
       (when (y-or-n-p "Do you use _test suffix in tests? ")
	 (dolist (f (directory-files default-directory))
	   (gmv/fix-test f))))
     '
     (defun gmv/fix-test (path)
       (when (string-suffix-p "_test.go" path)
	 (with-temp-file path
	   (insert-file-contents path)
	   (beginning-of-buffer)
	   (end-of-line)
	   (unless (string-suffix-p "_test\n" (thing-at-point 'line))
	     (insert "_test")))))

     (defun gmv/saved-buffers-p ()
       (let ((ok t))
	 (dolist (buf (list-buffers) ok)
	   (with-current-buffer buf
	     (when (and (buffer-file-name) (buffer-modified-p))
	       (message "Unsaved buffers. Save before continuing.")
	       (setq ok nil))))))
   #+END_SRC
